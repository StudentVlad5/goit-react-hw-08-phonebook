{"version":3,"file":"static/js/293.780e841f.chunk.js","mappings":"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","sources":["components/DynamicSort/DynamicSort.jsx","redux/selectors.js","components/ContactForms/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App.jsx","pages/Contacts.js"],"sourcesContent":["function DynamicSort(property) {\n    return function (a,b) {\n          const result = (a[property].toUpperCase() < b[property].toUpperCase()) ? -1 : (a[property] > b[property]) ? 1 : 0;\n          return result;\n    }\n  }\n  export default DynamicSort","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getStatusFilter = state => state.filters;","import {useState} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../../redux/operations\";\n// import { nanoid } from 'nanoid';\nimport propTypes from 'prop-types';\n\nfunction  ContactForm  ({contacts}) {\n\n    const [initial_state, setInitial_state] = useState({\n        name: \"\",\n        phone: \"\",\n    });\n\nconst dispatch = useDispatch();\n\nfunction handleChangeForm  (event) {\n    const {name, value} = event.target;\n    return setInitial_state(initial_state=>({...initial_state, [name]:value}));\n}\n\nfunction handleFormSubmit  (event)  {\n    event.preventDefault()\n    // const id = nanoid();\n    const isValidateForm =  validateForm();\n    if(isValidateForm){\n    let newContact = {name: initial_state.name, number: initial_state.phone};\n    resetForm ();\n    console.log(newContact)\n    dispatch(addContact(newContact));\n}}\n\nfunction validateForm () {\n    if (!initial_state.name || !initial_state.phone){\n        alert('Some field is empty');\n        return false}\n    else if ([...contacts].filter(key=>key.name === initial_state.name).length > 0){\n         alert(\"contact already exist\");\n    return false}\n    else return true\n    }\n\nfunction resetForm () {\n    setInitial_state(initial_state=>({\n        name: '',\n        phone: '',\n    }))\n}\n        return(\n        <form onSubmit={handleFormSubmit}>\n            <label>Name\n                <input  \n                type=\"text\"   \n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                value={initial_state.name}\n                onChange = {handleChangeForm}\n                required/>\n            </label>\n            <label>Phone\n                <input \n                type=\"tel\"\n                name=\"phone\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                value={initial_state.phone}\n                onChange = {handleChangeForm}\n                required/>\n            </label>\n            <button type='submit'>Add contact</button>\n        </form>)\n        \n    }\n\n\n\nexport default ContactForm\n\nContactForm.propTypes = {\n    state: propTypes.arrayOf(\n        propTypes.string\n    )\n}","\nconst ContactListItem = ({id, name, number, onRemove}) => {\n    return (\n        <li>\n            {name}: {number} <button onClick={()=>onRemove(id)}>Delete</button>\n        </li>\n    )\n}\n\nconst ContactList = ({contacts, onRemove}) =>{\n    if(contacts.length === 0){return null}\n    return (\n        <ul>\n            {contacts.map(contact => <ContactListItem {...contact} onRemove={onRemove} key={contact.id}/>)}\n        </ul>\n    )\n}\n\nexport default ContactList","const Filter = ({filter, onChange}) => {\n    return (\n    <input \n    type=\"text\" \n    name=\"filter\" \n    value = {filter} \n    onChange={({target}) => onChange(target.value)} \n    placeholder=\"Enter info for seach\"/>\n    )\n}\n\nexport default Filter","import { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { fetchContacts, deleteContact } from \"redux/operations\";\nimport {refreshUser} from \"../redux/auth/operations\"\nimport DynamicSort from './DynamicSort/DynamicSort';\nimport { setFilter} from \"../redux/filterSlice\";\nimport {getStatusFilter, getContacts} from '../redux/selectors';\nimport ContactForm from './ContactForms/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport propTypes from 'prop-types';\n\nexport default function App () {\n\nconst contacts = [...useSelector(getContacts)].sort(DynamicSort('name'));\nconst filter = useSelector(getStatusFilter);\n\nconst dispatch = useDispatch();\n\nuseEffect(() => {\n  dispatch(fetchContacts());\n}, [dispatch]);\n\nuseEffect(() => {\n  dispatch(refreshUser());\n}, [dispatch]);\n\nfunction handleRemoveContact  (event) {\n  console.log(event);\nreturn (dispatch(deleteContact(event)))\n}\n\nfunction handleFilterChange (filter) {dispatch(setFilter(filter))}\n\nfunction getVisibleContacts () {\n  return (contacts.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase())));\n} \n\nconst visibleContacts = getVisibleContacts();\n  return (\n    <div\n      style={{\n        height: '100vh',\n        display: 'flex',\n        flexDirection:'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        fontSize: 40,\n        color: '#010101'\n      }}>\n\n<ContactForm contacts={contacts}/>\n<h2>Contacts List: {visibleContacts.length}</h2>\n<h5>Find contact</h5><Filter filter={filter} onChange={handleFilterChange}/>\n<div className=\"list_section\">\n<ContactList contacts={visibleContacts} onRemove={handleRemoveContact}/>\n</div>\n  </div>\n  )\n}\n\nApp.propTypes = {\n  state: propTypes.arrayOf(\n      propTypes.string\n  )\n}","\nimport App from '../components/App';\n\n\nexport default function Contacts () {\n\n  return (\n    <>\n      <App />\n    </>\n  );\n}"],"names":["property","a","b","toUpperCase","getContacts","state","contacts","items","getStatusFilter","filters","useState","name","phone","initial_state","setInitial_state","dispatch","useDispatch","handleChangeForm","event","target","value","onSubmit","preventDefault","filter","key","length","alert","newContact","number","console","log","addContact","type","pattern","title","onChange","required","ContactListItem","id","onRemove","onClick","map","contact","placeholder","App","useSelector","sort","DynamicSort","useEffect","fetchContacts","refreshUser","visibleContacts","toLowerCase","includes","style","height","display","flexDirection","justifyContent","alignItems","fontSize","color","setFilter","className","deleteContact","Contacts"],"sourceRoot":""}